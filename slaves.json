{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Launches Jenkins slaves on demand.",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "m3.medium",
      "AllowedValues" : [ "m3.large", "m3.medium", "t1.micro", "t2.micro","t2.small","t2.medium","t2.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "Environment": {
      "Description" : "The environment this runs against (eg. live, development)",
      "Type" : "String",
      "Default": "live"
    },
    "KeyName" : {
      "Description" : "Name of an existing EC2 keypair to enable SSH access to the instances",
      "Type" : "String",
      "Default": "platform-team"
    },
    "SwarmPluginVersion" : {
      "Description" : "Version of the swarm plugin to run",
      "Type" : "String",
      "Default": "1.22"
    },
    "JenkinsMaster" : {
      "Description" : "URL of the Jenkins Master",
      "Type" : "String",
      "Default": "http://jenkins-int.mergermarket.it"
    },
    "JenkinsUser" : {
      "Description" : "Jenkins user",
      "Type" : "String",
      "Default": "jenkins"
    },
    "JenkinsPassword" : {
      "Description" : "Jenkins password",
      "Type" : "String",
      "NoEcho": "true",
      "Default": ""
    },
    "Subnets" : {
      "Description" : "List of VPC subnet IDs for the cluster",
      "Type" : "CommaDelimitedList",
      "Default": ""
    },
    "VpcId" : {
      "Description" : "VPC associated with the provided subnets",
      "Type" : "String",
      "Default": ""
    },
    "PrivateCIDR" : {
      "Description" : "Private CIDR",
      "Type" : "String",
      "Default": "10.0.0.0/8"
    },
    "AvailabilityZones": {
      "Description" : "(Optional) If passed, only launch nodes in these AZs (e.g., 'us-east-1a,us-east-1b'). Note: these must match the passed Subnets.",
      "Type" : "CommaDelimitedList",
      "Default" : ""
    }
  },

  "Conditions" : {
    "UseAllAvailabilityZones" : {"Fn::Equals" : [{ "Fn::Join" : ["", {"Ref" : "AvailabilityZones"} ]}, ""]}
  },

  "Mappings" : {
    "RegionMap" : {
      "us-east-1" : {
        "AMI" : "ami-f40bbe9c"
      },
      "us-west-1" : {
        "AMI" : "ami-cfe2ea8a"
      },
      "us-west-2" : {
        "AMI" : "ami-3fb1f20f"
      },
      "eu-west-1" : {
        "AMI" : "ami-e0d27397"
      },
      "ap-southeast-1" : {
        "AMI" : "ami-8a7057d8"
      },
      "ap-southeast-2" : {
        "AMI" : "ami-d5c1a2ef"
      },
      "ap-northeast-1" : {
        "AMI" : "ami-a7def7a6"
      },
      "sa-east-1" : {
        "AMI" : "ami-070fa51a"
      }
    }
  },
    
  "Resources" : {
    "IAMUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Policies" : [
        {
          "PolicyName" : "IAMAccess",
          "PolicyDocument" : {
            "Statement" : [{
              "Effect"    : "Allow",
              "NotAction" : "iam:*",
              "Resource"  : "*"
            }]
          }
        }]
      }
    },
    "ScaleUpPolicy" : {
    "Type" : "AWS::AutoScaling::ScalingPolicy",
    "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "ServerGroup" },
        "Cooldown" : "1",
        "ScalingAdjustment" : "1"
    }
    },
    "CPUAlarmHigh": {
    "Type": "AWS::CloudWatch::Alarm",
    "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": "10",
        "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
        "Period": "60",
        "AlarmActions": [ { "Ref": "ScaleUpPolicy" } ],
        "Namespace": "AWS/EC2",
        "Dimensions": [ {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "ServerGroup" }
        } ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "CPUUtilization"
    }
    },    
    "HostKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref" : "IAMUser" }
      }
    },
  "ServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : { "Ref" : "AWS::Region" } },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "5",
        "MaxSize" : "5",
        "DesiredCapacity" : "5",
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
	"Tags" : [
		{"Key": "Name", "Value" : { "Ref" : "AWS::StackName" }, "PropagateAtLaunch": "true"},
		{"Key": "Component", "Value": "Jenkins", "PropagateAtLaunch": "true"},
		{"Key": "Environment", "Value": { "Ref": "Environment" }, "PropagateAtLaunch": "true"},
		{"Key": "Project", "Value": "Platform", "PropagateAtLaunch": "true" }
	]
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config": {
            "packages" : {
              "yum" : { 
		        "git": [],
                "npm": [],
                "unzip": [],
                "rubygem-bundler": []
              }
            },
            "files" : {
              "/etc/aws.conf" : {
                "content" : { "Fn::Join" : ["\n", [
                  "[default]",
                  "aws_access_key_id={{access_key}}",
                  "aws_secret_access_key={{secret_key}}"
                ]]},
                "context" : {
                  "access_key"  : { "Ref" : "HostKeys" },
                  "secret_key"  : { "Fn::GetAtt" : ["HostKeys", "SecretAccessKey"]}
                },
                "mode"    : "000700",
                "owner"   : "root",
                "group"   : "root"
              },
              "/usr/local/bin/check_process": {
                "content": { "Fn::Join" : ["\n", [
                    "#!/bin/bash",

                    "PROCESS_NAME='swarm-plugin.jar'",

                    "ps -u -U jenkins | grep -q ${PROCESS_NAME}",
                    "RUNNING=$?",
                    "if [ $RUNNING -eq 0 ];",
                    "then",
                    "   echo \"Process ${PROCESS_NAME} is running\"",
                    "else",
                    "   /sbin/poweroff",
                    "fi"
                    ]]},
                "mode": "000700",
                "owner": "root",
                "group": "root"
              },
              "/etc/cron.d/check_process" : {
                "content" : { "Fn::Join" : ["\n", [
                  "*/5 * * * * root /usr/local/bin/check_process \n"
                ]]},
                "context" : {
                },
                "mode"    : "000600",
                "owner"   : "root",
                "group"   : "root"
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : "ami-21fb6b56",
        "SecurityGroups" : [ { "Ref" : "ServerSecurityGroup" } ],
        "AssociatePublicIpAddress": "true",
        "InstanceType" : { "Ref" : "InstanceType" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -ex\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r LaunchConfig ",
          "    --access-key ",  { "Ref" : "HostKeys" },
          "    --secret-key ", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]},
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "# Post-cfn work\n",
          
          "# Download swarm java utility\n",
          "wget http://maven.jenkins-ci.org/content/repositories/releases/org/jenkins-ci/plugins/swarm-client/", {"Ref": "SwarmPluginVersion"}, "/swarm-client-", {"Ref": "SwarmPluginVersion"},"-jar-with-dependencies.jar -O /usr/local/bin/swarm-plugin.jar", "\n",
          "id -u jenkins &>/dev/null || useradd jenkins -G docker,rvm \n",
          "mkdir -p /var/lib/jenkins \n",
          "chown -Rf jenkins:jenkins /var/lib/jenkins \n",
          "su jenkins -c \"java -jar /usr/local/bin/swarm-plugin.jar -fsroot /var/lib/jenkins -master " , {"Ref": "JenkinsMaster"}, " -username ", {"Ref": "JenkinsUser"} , " -password ", {"Ref": "JenkinsPassword" }, "\" \n",

          "# All is well, signal success\n",
          "cfn-signal -e 0 -r \"Stack setup complete\" '", { "Ref" : "WaitHandle" }, "'\n",

          "#EOF"
        ]]}}
      }
    },

    "ServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Jenkins slaves",
        "VpcId" : { "Ref" : "VpcId" },
        "SecurityGroupIngress" :
          [ { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref": "PrivateCIDR" } }]
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    }
  },

  "Outputs" : {
  }

}
